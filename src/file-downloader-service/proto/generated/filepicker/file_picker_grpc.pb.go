// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: file_picker.proto

package filepicker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FilePickerService_UploadFile_FullMethodName          = "/filepicker.FilePickerService/UploadFile"
	FilePickerService_ListFiles_FullMethodName           = "/filepicker.FilePickerService/ListFiles"
	FilePickerService_RequestFileDownload_FullMethodName = "/filepicker.FilePickerService/RequestFileDownload"
)

// FilePickerServiceClient is the client API for FilePickerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// File Picker Service definition
type FilePickerServiceClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	RequestFileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadResponse, error)
}

type filePickerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilePickerServiceClient(cc grpc.ClientConnInterface) FilePickerServiceClient {
	return &filePickerServiceClient{cc}
}

func (c *filePickerServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, FilePickerService_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePickerServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, FilePickerService_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePickerServiceClient) RequestFileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileDownloadResponse)
	err := c.cc.Invoke(ctx, FilePickerService_RequestFileDownload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilePickerServiceServer is the server API for FilePickerService service.
// All implementations must embed UnimplementedFilePickerServiceServer
// for forward compatibility.
//
// File Picker Service definition
type FilePickerServiceServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	RequestFileDownload(context.Context, *FileDownloadRequest) (*FileDownloadResponse, error)
	mustEmbedUnimplementedFilePickerServiceServer()
}

// UnimplementedFilePickerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilePickerServiceServer struct{}

func (UnimplementedFilePickerServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFilePickerServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFilePickerServiceServer) RequestFileDownload(context.Context, *FileDownloadRequest) (*FileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFileDownload not implemented")
}
func (UnimplementedFilePickerServiceServer) mustEmbedUnimplementedFilePickerServiceServer() {}
func (UnimplementedFilePickerServiceServer) testEmbeddedByValue()                           {}

// UnsafeFilePickerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilePickerServiceServer will
// result in compilation errors.
type UnsafeFilePickerServiceServer interface {
	mustEmbedUnimplementedFilePickerServiceServer()
}

func RegisterFilePickerServiceServer(s grpc.ServiceRegistrar, srv FilePickerServiceServer) {
	// If the following call pancis, it indicates UnimplementedFilePickerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FilePickerService_ServiceDesc, srv)
}

func _FilePickerService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePickerServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePickerService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePickerServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePickerService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePickerServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePickerService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePickerServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePickerService_RequestFileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePickerServiceServer).RequestFileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePickerService_RequestFileDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePickerServiceServer).RequestFileDownload(ctx, req.(*FileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilePickerService_ServiceDesc is the grpc.ServiceDesc for FilePickerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilePickerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filepicker.FilePickerService",
	HandlerType: (*FilePickerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _FilePickerService_UploadFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _FilePickerService_ListFiles_Handler,
		},
		{
			MethodName: "RequestFileDownload",
			Handler:    _FilePickerService_RequestFileDownload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_picker.proto",
}
